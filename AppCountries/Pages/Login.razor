@page "/"
@layout LoginLayout
@inject HttpClient httpClient
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider autenticacionProvider
@inject IJSRuntime JS
@inject SweetAlertService Swal
@using System.Text.Json;
@using BlazorLogin.Shared
@using Blazored.LocalStorage;
@using BlazorLogin.Components  <!-- Asegúrate de usar el namespace correcto -->
@inject FirebaseService FirebaseService
@inject ILocalStorageService LocalStorage // Aquí se inyecta ILocalStorageService
@using BlazorLogin.Client.Extensiones

<div class="login-container" style="background-image: url('/images/fondoo.png'); background-size: cover; background-position: center; ">
    <div class="login-card">
        <div class="text-center mb-4">
            <h3>Inicio de Sesión</h3>
        </div>

        <EditForm Model="login" OnValidSubmit="Logins">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>Correo</label>
                <InputText @bind-Value="login.Correo" class="form-control" />
                <ValidationMessage For="@(() => login.Correo)" />
            </div>

            <div class="mb-3">
                <label>Contraseña</label>
                <InputText type="password" @bind-Value="login.Clave" class="form-control" />
                <ValidationMessage For="@(() => login.Clave)" />
            </div>

            <div class="mb-3">
                <button type="submit" class="btn btn-primary btn-block">Login</button>
            </div>
        </EditForm>

        <div class="mb-3">
            <button @onclick="ShowPopup" class="btn btn-primary btn-block">Registro</button>
        </div>
    </div>

    <RegisterComponent IsVisible="@showPopup" Title="Registro" Message="" OnClose="HandleClose" />
</div>


@code {
    private LoginDTO login = new LoginDTO();
    private UserDocument? documentData;
    private async Task Logins()
    {

        var result = await FirebaseService.LoginWithEmailPasswordAsync(login.Correo, login.Clave);
        Console.WriteLine(result);
        var userResult = JsonSerializer.Deserialize<LoginResult>(result);

        if (userResult.error != null)
        {
            Console.WriteLine($"Error: {userResult.error}");
            await Swal.FireAsync("Oops...", userResult.error, "error");
        }
        else
        {
            Console.WriteLine($"User ID: {userResult.uid}");

            await LoadInfoUser(userResult.uid, userResult.email);
        }
    }

    private async Task LoadInfoUser(string documentId, string mail)
    {
        Console.WriteLine($"Cargando documento de la colección: Usuarios, ID: {documentId}");
        SesionDTO sesionDTO = new SesionDTO();

        var result = await FirebaseService.GetDocumentByIdAsync(documentId);

        Console.WriteLine($"Resultado de Firestore: {result}");

        // Deserializa el resultado al objeto UserDocument
        try
        {
            documentData = JsonSerializer.Deserialize<UserDocument>(result);
            // Guardar el UID en localStorage
            await LocalStorage.SetItemAsync("userId", documentId);
            sesionDTO.Nombre = (documentData?.Nombre ?? "") + " " + (documentData?.Apellidos ?? "");
            sesionDTO.Correo = mail;
            sesionDTO.Rol = documentData.IsAdmin ? "Administrador" : "Visita";
            sesionDTO.Region = documentData.IsAdmin ? "all" : documentData.Continente;
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(sesionDTO);

            // Redirigir al usuario
            Navigation.NavigateTo("/Index");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"Error al deserializar: {ex.Message}");
        }
    }

    private bool showPopup = false;

    private void ShowPopup()
    {
        showPopup = true;
    }

    private void HandleClose(bool isVisible)
    {
        showPopup = isVisible;
    }
}
