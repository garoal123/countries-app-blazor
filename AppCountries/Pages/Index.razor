@page "/Index"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@inject IJSRuntime JSRuntime
@inject FirebaseService FirebaseService
@inject NavigationManager NavigationManager
@using System.Text.Json
@using BlazorLogin.Shared
@using Blazored.LocalStorage;
@using System.Globalization;
@inject IToastService toastService
@inject CountriesService countriesService
@inject ILocalStorageService LocalStorage
@using BlazorLogin.Client.Extensiones;
@inject AuthenticationStateProvider autenticacionProvider
@using QuickType;
@attribute [Authorize]
<PageTitle>Index</PageTitle>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (filterCountryList == null)
{
    <p>Error loading countries. Please try again later.</p>
}
else
{
    <div class="countries__content-container">
        <h1 class="countries__title">Countries:</h1>

        <section class="filter-section">
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Buscar..." @oninput="SearchCoutry" />
                <button class="search-btn">
                    <i class="fa fa-search"></i>
                </button>
            </div>

            <AuthorizeView Roles="Administrador,Supervisor">
                <Authorized>
                    <div class="continent-select-container">
                        <label for="continentSelect" class="label-continent">Seleccionar Continente:</label>
                        <select id="continentSelect" @onchange="SelectRegion" class="select-continent">
                            <option value="">Todos</option>
                            @foreach (var continent in Continents)
                            {
                                <option value="@continent">@continent</option>
                            }
                        </select>
                    </div>
                </Authorized>
            </AuthorizeView>

            <!-- Select para ordenar alfabéticamente -->
            <div class="continent-select-container">
                <label for="orderSelect" class="label-continent">Ordenar por:</label>
                <select id="orderSelect" @onchange="OrderCountries" class="select-continent">
                    <option value="az">A-Z</option>
                    <option value="za">Z-A</option>
                    <option value="population-asc">Menor población</option>
                    <option value="population-desc">Mayor población</option>
                </select>
            </div>
            <div class="view-toggle-buttons" style="display: flex; justify-content: flex-end; gap: 10px; margin-top: 36px;">
                <button @onclick="() => modeGridAndList('l')" class="btn btn-info">
                    <i class="fa fa-list"></i>
                </button>
                <button @onclick="() => modeGridAndList('g')" class="btn btn-info">
                    <i class="fa fa-th"></i>
                </button>
            </div>

        </section>

        @if (filterCountryList.Count > 0)
        {
            @if (isGrid) // Renderizar como grid
            {
                <div class="countries-grid">
                    @foreach (var country in filterCountryList)
                    {
                        <div class="country-card" @onclick="() => NavigateToCountryDetails(country.Cca2)">
                            <img src="@country.Flags.Png" alt="Flag" class="country-flag" />
                            <div class="country-info">
                                <h3>@country.Name?.Common</h3>
                                <p>Capital: @country.Capital?.FirstOrDefault()</p>
                                <p>Población: @country.Population.ToString("N0", CultureInfo.GetCultureInfo("en-US"))</p>
                            </div>
                        </div>
                    }
                </div>
            }
            else // Renderizar como tabla
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">Bandera</th>
                                <th scope="col">Idd</th>
                                <th scope="col">Nombre</th>
                                <th scope="col">Capital</th>
                                <th scope="col">Población</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var country in filterCountryList)
                            {
                                <tr @onclick="() => NavigateToCountryDetails(country.Cca2)">
                                    <td><img src="@country.Flags.Png" alt="Flag" style="width: 50px; height: auto;" /></td>
                                    <td>@country.Idd.Root@(country.Idd.Suffixes?.FirstOrDefault() ?? "")</td>
                                    <td>@country.Name?.Common</td>
                                    <td>@country.Capital?.FirstOrDefault()</td>
                                    <td>@country.Population.ToString("N0", CultureInfo.GetCultureInfo("en-US"))</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        }
        else
        {
            <p>Sin resultados</p>
        }
    </div>
}

@code {
    private UserDocument? documentData;
    private bool isLoading = true;
    private bool isGrid = true;
    private string Locality = string.Empty;
    List<countryV3> filterCountryList = new();
    List<countryV3> countries = new();
    private string[] Continents = { "Africa", "Americas", "Antarctic", "Asia", "Europe", "Oceania" };
    private string selectedOrder = "az"; // Orden por defecto A-Z

    private async Task getCountries()
    {
        try
        {
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            Locality = await autenticacionExt.ObtenerLocalidadAsync();

            var countriesInEurope = (await countriesService.GetCountriesByRegion(Locality))
                .OrderBy(c => c.Name.Common);

            filterCountryList = countries = countriesInEurope.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los países: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LocalStorage.GetItemAsync<string>("userId");
        await getCountries();
    }

    private void SearchCoutry(ChangeEventArgs e)
    {
        filterCountryList = countries
            .Where(country =>
                country.Name?.Common?.Contains(e.Value.ToString(), StringComparison.OrdinalIgnoreCase) == true)
            .ToList();

        ApplyOrder(); // Aplicar el orden después de filtrar por búsqueda
    }

    private void SelectRegion(ChangeEventArgs e)
    {
        var selectedContinent = e.Value.ToString();
        filterCountryList = string.IsNullOrEmpty(selectedContinent)
            ? countries
            : countries.Where(country => country.Region.ToString().Contains(selectedContinent, StringComparison.OrdinalIgnoreCase)).ToList();

        ApplyOrder(); // Aplicar el orden después de filtrar por continente
    }

    private void OrderCountries(ChangeEventArgs e)
    {
        selectedOrder = e.Value.ToString();
        ApplyOrder(); // Aplicar el orden cuando el usuario cambia el orden
    }

    // Aplica el orden actual a la lista filtrada
    private void ApplyOrder()
    {
        filterCountryList = selectedOrder switch
        {
            "az" => filterCountryList.OrderBy(c => c.Name.Common).ToList(),
            "za" => filterCountryList.OrderByDescending(c => c.Name.Common).ToList(),
            "population-asc" => filterCountryList.OrderBy(c => c.Population).ToList(),
            "population-desc" => filterCountryList.OrderByDescending(c => c.Population).ToList(),
            _ => filterCountryList
        };
    }

    private void NavigateToCountryDetails(string cca2)
    {
        NavigationManager.NavigateTo($"country/{cca2}");
    }

    private void modeGridAndList(char type)
    {
        isGrid = type == 'l' ? false : true; // Cambia 'l' por 'g' si quieres que 'g' represente grid.
    }


}
