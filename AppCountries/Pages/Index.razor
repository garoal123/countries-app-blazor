@page "/Index"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@inject IJSRuntime JSRuntime
@inject FirebaseService FirebaseService
@inject NavigationManager NavigationManager
@using System.Text.Json
@using BlazorLogin.Shared
@using Blazored.LocalStorage;
@using System.Globalization;
@inject IToastService toastService
@inject CountriesService countriesService
@inject ILocalStorageService LocalStorage
@using BlazorLogin.Client.Extensiones;
@inject AuthenticationStateProvider autenticacionProvider
@using QuickType;
@attribute [Authorize]
<PageTitle>Index</PageTitle>
@if (isLoading)
{
    <p>Loading...</p>
}
else if (filterCountryList == null)
{
    <p>Error loading countries. Please try again later.</p>
}
else
{
<div class="countries__content-container">
    <h1 class="countries__title">Countries:</h1>

    <section class="filter-section">
        <div class="search-container">
            <input type="text" class="search-input" placeholder="Buscar..." @oninput="SearchCoutry" />
            <button class="search-btn">
                <i class="fa fa-search"></i>
            </button>
        </div>

        <AuthorizeView Roles="Administrador,Supervisor">
            <Authorized>
                <div class="continent-select-container">
                    <label for="continentSelect" class="label-continent">Seleccionar Continente:</label>
                    <select id="continentSelect" @onchange="SelectRegion" class="select-continent">
                        <option value="">Todos</option>
                        @foreach (var continent in Continents)
                        {
                            <option value="@continent">@continent</option>
                        }
                    </select>
                </div>
            </Authorized>
        </AuthorizeView>

        <!-- Agregamos el select para ordenar alfabéticamente -->
        <div class="continent-select-container">
            <label for="continentSelect" class="label-continent">Ordenar por:</label>
            <select id="orderSelect" @onchange="OrderCountries" class="select-continent">
                <option value="az">A-Z</option>
                <option value="za">Z-A</option>
                <option value="population-asc">Menor población</option>
                <option value="population-desc">Mayor población</option>
            </select>
        </div>
    </section>

    @if (filterCountryList.Count > 0)
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Bandera</th>
                        <th scope="col">Idd</th>
                        <th scope="col">Nombre</th>
                        <th scope="col">Capital</th>
                        <th scope="col">Población</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var country in filterCountryList)
                    {
                        <tr @onclick="() => NavigateToCountryDetails(country.Cca2)">
                            <td>
                                <img src=@country.Flags.Png alt="Flag" style="width: 50px; height: auto;" />
                            </td>
                            <td>@country.Idd.Root@(country.Idd.Suffixes?.FirstOrDefault() ?? "")</td>
                            <td>@country.Name?.Common</td>
                            <td>@country.Capital?.FirstOrDefault()</td>
                            <td>@country.Population.ToString("N0", CultureInfo.GetCultureInfo("en-US"))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p>Sin resultados</p>
    }
</div>
}


@code {
    private UserDocument? documentData;
    private bool isLoading = true;
    private string Locality = string.Empty;
    List<countryV3> filterCountryList = new();
    List<countryV3> countries = new();
    private string[] Continents = { "Africa", "Americas", "Antarctic", "Asia", "Europe", "Oceania" }; //
    private string selectedOrder = "az"; // Orden por defecto A-Z

    private async Task getCountries()
    {
        try
        {
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            Locality = await autenticacionExt.ObtenerLocalidadAsync();

            var countriesInEurope = (await countriesService.GetCountriesByRegion(Locality))
            .OrderBy(c => c.Name.Common);

            filterCountryList = countries = countriesInEurope.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los países: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {

        var userId = await LocalStorage.GetItemAsync<string>("userId");
        await getCountries(); // Reemplaza con el ID real del documento
    }

    private void SearchCoutry(ChangeEventArgs e)
    {
        filterCountryList = countries
            .Where(country =>
                country.Name?.Common?.Contains(e.Value.ToString(), StringComparison.OrdinalIgnoreCase) == true)
            .ToList();

        ApplyOrder(); // Aplicar el orden después de filtrar por búsqueda
    }

    private void SelectRegion(ChangeEventArgs e)
    {
        var selectedContinent = e.Value.ToString();
        if (string.IsNullOrEmpty(selectedContinent))
        {
            filterCountryList = countries;
        }
        else
        {
            filterCountryList = countries.Where(country => country.Region.ToString().Contains(selectedContinent, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        ApplyOrder(); // Aplicar el orden después de filtrar por continente
    }

    private void OrderCountries(ChangeEventArgs e)
    {
        selectedOrder = e.Value.ToString();
        ApplyOrder(); // Aplicar el orden cuando el usuario cambia el orden
    }

    // Aplica el orden actual a la lista filtrada
    private void ApplyOrder()
    {
        if (selectedOrder == "az")
        {
            filterCountryList = filterCountryList.OrderBy(c => c.Name.Common).ToList();
        }
        else if (selectedOrder == "za")
        {
            filterCountryList = filterCountryList.OrderByDescending(c => c.Name.Common).ToList();
        }
        else if (selectedOrder == "population-asc")
        {
            filterCountryList = filterCountryList.OrderBy(c => c.Population).ToList();
        }
        else if (selectedOrder == "population-desc")
        {
            filterCountryList = filterCountryList.OrderByDescending(c => c.Population).ToList();
        }
    }
    private void NavigateToCountryDetails(string cca2)
    {
        NavigationManager.NavigateTo($"country/{cca2}");
    }
}
